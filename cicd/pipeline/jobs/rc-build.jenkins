#!groovy
//This is the RC pipeline which will normally run once every night
//and will build a shippable output for the service, which includes:
//build, deploy docker image and trigger deployment pipeline

def pipelineScriptPath = "cicd/pipeline/"
def buildFlow

pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
        label 'node-10-stretch-browsers-ansible11'
    }
    environment {
        PLAYBOOK = 'ansible/playbook.yml'
        INVENTORY = 'ansible/inventory.yml'
    }
    stages {
        stage('Checkout code') {
            steps {
                script {
                    println("ENV_STAGE  $ENV_STAGE")
                    println("PLAYBOOK  $PLAYBOOK")
                    println("INVENTORY  $INVENTORY")
                    println("K8S_NAMESPACE  $K8S_NAMESPACE")
                    buildFlow = load pipelineScriptPath + "util/buildUtil.groovy"
                    buildFlow.checkout()
                }
            }
        }
        stage("Build") {
            parallel {
                stage('UI') {
                    steps {
                        script {
                            buildFlow.buildUi()
                        }
                    }
                }
                stage('API') {
                    steps {
                        script {
                            buildFlow.build()
                        }
                    }
                }
            }
        }
        stage('Build and push docker images') {
            environment {
                DOCKER_HOST = 'tcp://docker-build.aureacentral.com:2375'
            }
            parallel {
                stage('Build and push docker image service') {
                    steps {
                        script {
                            buildFlow.buildAndPushDocker(ENV_STAGE, pwd() + "/service/aurea-zero-based-api", "api")
                        }
                    }
                }
                stage('Build and push docker image ui') {
                    steps {
                        script {
                            buildFlow.buildAndPushDocker(ENV_STAGE, pwd() + "/ui", "ui")
                        }
                    }
                }
            }
        }

        stage('Deploy to CDH') {
            when {
                expression {
                    return env.CDH_DEPLOY == 'on';
                }
            }
            environment {
                //      sometimes we must use _, sometimes -
                ENV_SUFFIX = "-${ENV_STAGE}"
                DOCKER_HOST = 'tcp://dl6.aureacentral.com:2375'
                BACKEND_URN = "aurea-zero-based-api${ENV_SUFFIX}.internal-webproxy.aureacentral.com"
                AUREA_API_UI_URN = "aurea-zero-based-ui${ENV_SUFFIX}.internal-webproxy.aureacentral.com"
                BACKEND_URL = "http://${BACKEND_URN}"
                AUREA_API_UI_URL = "http://${AUREA_API_UI_URN}"
            }
            steps {
                script {
                    def deployFlow = load pipelineScriptPath + "util/deployUtil.groovy"
                    deployFlow.deploy()
                }
            }
        }
        stage('Deploy to K8s') {
            steps {
                sh 'ansible-playbook ${PLAYBOOK} -i ${INVENTORY} --tags all'
            }
        }
        stage('Preparing devspaces image') {
            steps {
                script {
                    buildFlow.buildAndPushDocker("latest", pwd() + "/devspaces", "devspaces")
                }
            }
        }
    }
    post {
        always {
            script {
                def notifyFlow = load pipelineScriptPath + "util/notifyUtil.groovy"
                notifyFlow.notifyBuild(currentBuild.result)
            }
        }
    }
}
